import random

# cohension represents the Single responsibility of the SOLID principles


# example of good cohension


class StudentInfo:
    """
    This class acts as DB for the time being to store the student infos
    """

    name: str
    gender: str
    is_topper: bool

    def __init__(self, gender, name, is_topper):
        """Used to initialize the class"""
        self.name = name
        self.gender = gender
        self.is_topper = is_topper

    def print(self):
        """Prints the student info"""
        print(f"{self.name} is a {self.gender} and is a topper: {self.is_topper}")


class Student:
    """Represents a student object"""

    id: int
    email: int
    info: StudentInfo

    def __init__(self, id, email, info):
        self.id = id
        self.email = email
        self.info = info

    def print(self):
        """Prints the student info"""
        print(f"Roll number: {self.id} has email {self.email}")
        self.info.print()


class StudentRegistry:
    """
    Generate student name and roll no.
    """

    def generate_student_roll_no(self):
        """Roll number is generated using the random.randint function"""
        return random.randint(0, 1000)

    def generate_student_name(self, roll_no):
        """Student name is generated by concatenating the roll no. to student"""
        return f"Student-{roll_no}"

    def generate_student_email(self, roll_no):
        """Student name is generated by concatenating the roll no. to student"""
        return f"Student_{roll_no}@gmail.com"

    def create_student(self):
        """Responsible for creating a student"""
        roll_no = self.generate_student_roll_no()
        name = self.generate_student_name(roll_no)
        email = self.generate_student_email(roll_no)
        return Student(roll_no, email, StudentInfo(name, "Male", False))


class ClassRoom:
    """
    Represents a classromm in a school
    """

    def register_student(self):
        """Generate student name and roll no. and register the student"""
        register = StudentRegistry()  # Can be improved by shifting this to composition?
        return register.create_student()


if __name__ == "__main__":
    student = ClassRoom().register_student()
    student.print()
